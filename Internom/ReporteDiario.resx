<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAYABgAAD/4QC8RXhpZgAATU0AKgAAAAgAAwE7AAIAAAALAAAAModpAAQAAAAB
        AAAAPpydAAEAAAAWAAAAngAAAABNYXIgRGlheiAuAAAABJADAAIAAAAUAAAAdJAEAAIAAAAUAAAAiJKR
        AAIAAAADNDIAAJKSAAIAAAADNDIAAAAAAAAyMDE3OjA2OjA3IDEyOjE1OjAzADIwMTc6MDY6MDcgMTI6
        MTU6MDMAAABNAGEAcgAgAEQAaQBhAHoAIAAuAAAA/9sAQwAHBQUGBQQHBgUGCAcHCAoRCwoJCQoVDxAM
        ERgVGhkYFRgXGx4nIRsdJR0XGCIuIiUoKSssKxogLzMvKjInKisq/9sAQwEHCAgKCQoUCwsUKhwYHCoq
        KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq/8AAEQgBFQEfAwEi
        AAIRAQMRAf/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAAB
        fQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNE
        RUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1
        tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEA
        AAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXETIjKBCBRC
        kaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpz
        dHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ
        2uLj5OXm5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8A+kaKKKACiiigAooooAKKKKACiiigAooooAKK
        KKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKK
        KKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooqNpcfd5oHa5JTWkC+5qMysfahI93J6Uh2tuBl
        Y+1AlYe9TAAdOKCAeozQF12GLIG68Gn1E8eOV6elLG+flP4UA11RJRRRTJCiiigAooooAKKKKACiiigA
        ooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigBkrYXHrTY0BGTz6Us3anIcoKXUrZDgMdK
        KKKZIUUUUAFQspVsjp2qaigadiNZf73504yKPf6VHKAGGBinxY28de9IppWuKrq3TrTqhkxv4/GpI23L
        z1FAmtLjqKKKZIUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFACMoZeagV
        ip4qWVsLgdTUQGTgUmXHYk872/WpAcgGopEAXI/GljcY2nr2oE0rXRJRRRTJCiiigCGX734UyrDKGGDU
        JjYUmaJ6DalhHBNMRdzVOBgYFCFJ9AooopkBRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFF
        FFABRRRQAUdKKjlbAx60DWpGzbmzUkS4GT3piLubFSu2xf5Uin2QyRsnaKDEQuc/WiJc/MfwpZX/AIR+
        NAeSGITuAzxmp6rkFcE/Wp1YMOKEEu4tFFFMgKZKcL9afTZP9WaBrcbEPlJ96kqOHoakoQS3CiiigQUU
        UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFRSj5ge1S0UDTsQI+0+1LzI/tSvFj
        lfypgJByKkvR6omZgi/yqONdzZPSkJMjDPFSsRGuB+FMW2g2Vv4aZsZeRn8KdGuTuNLI/wDCPxoDyQzz
        G9f0p6S/3vzqKpFiyvPBpDdh/mL61G77+B0p3k/7X6U5UC9Pzp6k6IEXavPWnUUUyQooooAKKKKACiii
        gAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAproG9jTqKAK7KVPNAOWG7JFWCARg1C
        0ZHI5FKxopXHtIAvy/8A6qhoqWOPu34Utw0SCOPHLdewqSiiqIbuFFFFAgooooAKKKKACiiigAooooAK
        KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigBNoznA/KloooAKKKKACiiig
        AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig
        AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig
        AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACkJ2jJpaZJztHqaBojZy309KQEjocVMUXGMVB
        UlqzJo33cHrT6rgEnApdzpxyKdxOJPRUGXPPzU5ZSPvc0XFyktFHWimSFFFFABRRRQAUUUUAFFFFABRR
        RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABTJSNuO9OLBepxUJ/eSfWkyooN7EYzTan2K
        QAR0oEajtRYfMhkS87j+FS0UUyW7hUcq5G7vUlI5wh+lALcZEflI9KkqKH7x+lS0kEtwooopiCiiigAo
        oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAIArOf61KqBfrSgBRgUtIpsK
        KKKZIUUUUAFQysS23sKmqB+ZDikyo7ixvtPPQ1NVano+3g9P5UIbRNRRRTICiiigAooooAKKKKACiiig
        AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKM5pGOFJquAT0pFJXJnkAHy8mo
        0IDjdQuC3zVI0YI+Xg0D0WgOm7kdahIwcGpFcocN0/lTnCsm78jQCuhiPt4PT+VTVWqwgIQZoQSQtFFF
        MgKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigCKNznaalqBOJBmp6SKlu
        FNaQKcHNOqCQ5c0CSuDuW9hT4iMY705VQj5QDTGixyv5UFabDnjzyvB9KYrlDg9KVZMcNUhUOP60Btox
        CFkX+tQn0zxSsCjEZpFXc2BSGtB0aZOT0qagDAwKKohu4UUUUCCiiigAooooAKKKKACiiigAooooAKKK
        KACiiigAooooAKKKKACiiigAooooAhkXDZHSnLLx8w/KpKYYlPt9KRV11EaX+6PzqPBxntUoiUe/1p9A
        7pbFcEg5FSLKD97ihogfu8VGQV6ilsPRkzIG+vrUfzRmkVyv09KRm3Nk0wSYnU+9Tou1ffvTYkx8x/Cp
        KETJ9AooopkhRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQ
        AUUUUAFBAIwaKKAI2i/un86Fiwct+VSUUrD5mFFFFMQUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUA
        FFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUA
        FFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAf//Z
</value>
  </data>
</root>